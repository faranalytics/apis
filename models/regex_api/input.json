{"textInput":"Node.js\nAbout this documentation\nUsage and example\nAssertion testing\nAsync hooks\nBuffer\nC++ addonssdsdsadsa\nC/C++ addons with N-API\nC++ embedder API\nChild processes\nCluster\nCommand-line options\nConsole\nCrypto\nDebugger\nDeprecated APIs\nDiagnostics Channel\nDNS\nDomain\nErrors\nEvents\nFile system\nGlobals\nHTTP\nHTTP/2\nHTTPS\nInspector\nInternationalization\nModules: CommonJS modules\nModules: ECMAScript modules\nModules: module API\nModules: Packages\nNet\nOS\nPath\nPerformance hooks\nPolicies\nProcess\nPunycode\nQuery strings\nQUIC\nReadline\nREPL\nReport\nStream\nString decoder\nTimers\nTLS/SSL\nTrace events\nTTY\nUDP/datagram\nURLsdsadatrue\nUtilities\nV8\nVM\nWASI\nWeb Crypto API\nWorker threads\nZlib\nCode repository and issue tracker\nNode.js v15.3.0 Documentation\nIndex View on single page View as JSONsdsad View another version â–¼ Edit on GitHub\nTable of Contentssdsadsadsa\nChild processtrue\nAsynchronous process creation\nSpawning .bat and .cmd files on Windows\nchild_process.exec(command[, options][, callback])\nchild_process.execFile(file[, args][, options][, callback])\nchild_process.fork(modulePath[, args][, options])\nchild_process.spawn(command[, args][, options])\noptions.detached\noptions.stdio\nSynchronous process creation\nchild_process.execFileSync(file[, args][, options])\nchild_process.execSync(command[, options])\nchild_process.spawnSync(command[, args][, options])\nClass: ChildProcess\nEvent: 'close'\nEvent: 'disconnect'\nEvent: 'error'\nEvent: 'exit'\nEvent: 'message'\nEvent: 'spawn'\nsubprocess.channel\nsubprocess.channel.ref()\nsubprocess.channel.unref()\nsubprocess.connected\nsubprocess.disconnect()\nsubprocess.exitCode\nsubprocess.kill([signal])\nsubprocess.killed\nsubprocess.pid\nsubprocess.ref()\nsubprocess.send(message[, sendHandle[, options]][, callback])\nExample: sending a server object\nExample: sending a socket object\nsubprocess.signalCode\nsubprocess.spawnargs\nsubprocess.spawnfile\nsubprocess.stderr\nsubprocess.stdin\nsubprocess.stdio\nsubprocess.stdout\nsubprocess.unref()\nmaxBuffer and Unicode\nShell requirements\nDefault Windows shell\nAdvanced serialization\nChild process#\nStability: 2 - Stable\nSource Code: lib/child_process.js\n\nThe child_process module provides the ability to spawn subprocesses in a manner that is similar, but not identical, to popen(3). This capability is primarily provided by the child_process.spawn() function:\n\nconst { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});sssss\nBy default, pipes for stdin, stdout, and stderr are established between the parent Node.js process and the spawned subprocess. These pipes have limited (and platform-specific) capacity. If the subprocess writes to stdout in excess of that limit without the output being captured, the subprocess blocks waiting for the pipe buffer to accept more data. This is identical to the behavior of pipes in the shell. Use the { stdio: 'ignore' } option if the output will not be consumed.\n\nThe command lookup is performed using the options.env.PATH environment variable if it is in the options object. Otherwise, process.env.PATH is used.\n\nOn Windows, environment variables are case-insensitive. Node.js lexicographically sorts the env keys and uses the first one that case-insensitively matches. Only first (in lexicographic order) entry will be passed to the subprocess. This might lead to issues on Windows when passing objects to the env option that have multiple variants of the same key, such as PATH and Path.\n\nThe child_process.spawn() method spawns the child process asynchronously, without blocking the Node.js event loop. The child_process.spawnSync() function provides equivalent functionality in a synchronous manner that blocks the event loop until the spawned process either exits or is terminated.\n\nFor convenience, the child_process module provides a handful of synchronous and asynchronous alternatives to child_process.spawn() and child_process.spawnSync(). Each of these alternatives are implemented on top of child_process.spawn() or child_process.spawnSync().\n\nchild_process.exec(): spawns a shell and runs a command within that shell, passing the stdout and stderr to a callback function when complete.\nchild_process.execFile(): similar to child_process.exec() except that it spawns the command directly without first spawning a shell by default.\nchild_process.fork(): spawns a new Node.js process and invokes a specified module with an IPC communication channel established that allows sending messages between parent and child.\nchild_process.execSync(): a synchronous version of child_process.exec() that will block the Node.js event loop.\nchild_process.execFileSync(): a synchronous version of child_process.execFile() that will block the Node.js event loop.\nFor certain use cases, such as automating shell scripts, the synchronous counterparts may be more convenient. In many cases, however, the synchronous methods can have significant impact on performance due to stalling the event loop while spawned processes complete.\n\nAsynchronous process creation#\nThe child_process.spawn(), child_process.fork(), child_process.exec(), and child_process.execFile() methods all follow the idiomatic asynchronous programming pattern typical of other Node.js APIs.\n\nEach of the methods returns a ChildProcess instance. These objects implement the Node.js EventEmitter API, allowing the parent process to register listener functions that are called when certain events occur during the life cycle of the child process.\n\nThe child_process.exec() and child_process.execFile() methods additionally allow for an optional callback function to be specified that is invoked when the child process terminates.\n\nSpawning .bat and .cmd files on Windows#\nThe importance of the distinction between child_process.exec() and child_process.execFile() can vary based on platform. On Unix-type operating systems (Unix, Linux, macOS) child_process.execFile() can be more efficient because it does not spawn a shell by default. On Windows, however, .bat and .cmd files are not executable on their own without a terminal, and therefore cannot be launched using child_process.execFile(). When running on Windows, .bat and .cmd files can be invoked using child_process.spawn() with the shell option set, with child_process.exec(), or by spawning cmd.exe and passing the .bat or .cmd file as an argument (which is what the shell option and child_process.exec() do). In any case, if the script filename contains spaces it needs to be quoted.\n\n// On Windows Only...\nconst { spawn } = require('child_process');\nconst bat = spawn('cmd.exe', ['/c', 'my.bat']);ssss\n\nbat.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\nbat.stderr.on('data', (data) => {\n  console.error(data.toString());\n});\n\nbat.on('exit', (code) => {\n  console.log(`Child exited with code ${code}`);\n});Edit\n// OR...\nconst { exec, spawn } = require('child_process');\nexec('my.bat', (err, stdout, stderr) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(stdout);\n});\n\n// Script with spaces in the filename:\nconst bat = spawn('\"my script.cmd\"', ['a', 'b'], { shell: true });\n// or:\nexec('\"my script.cmd\" a b', (err, stdout, stderr) => {\n  // ...\n});\nchild_process.exec(command[, options][, callback])#\nHistory\ncommand <string> The command to run, with space-separated arguments.\noptions <Object>\ncwd <string> Current working directory of the child process. Default: null.\nenv <Object> Environment key-value pairs. Default: process.env.\nencoding <string> Default: 'utf8'\nshell <string> Shell to execute the command with. See Shell requirements and Default Windows shell. Default: '/bin/sh' on Unix, process.env.ComSpec on Windows.\ntimeout <number> Default: 0\nmaxBuffer <number> Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated and any output is truncated. See caveat at maxBuffer and Unicode. Default: 1024 * 1024.\nkillSignal <string> | <integer> Default: 'SIGTERM'\nuid <number> Sets the user identity of the process (see setuid(2)).\ngid <number> Sets the group identity of the process (see setgid(2)).\nwindowsHide <boolean> Hide the subprocess console window that would normally be created on Windows systems. Default: false.\ncallback <Function> called with the output when process terminates.\nerror <Error>\nstdout <string> | <Buffer>\nstderr <string> | <Buffer>\nReturns: <ChildProcess>\nSpawns a shell then executes the command within that shell, buffering any generated output. The command string passed to the exec function is processed directly by the shell and special characters (vary based on shell) need to be dealt with accordingly:\n\nexec('\"/path/to/test file/test.sh\" arg1 arg2');\n// Double quotes are used so that the space in the path is not interpreted as\n// a delimiter of multiple arguments.\n\nexec('echo \"The \\\\$HOME variable is $HOME\"');\n// The $HOME variable is escaped in the first instance, but not in the second.\nNever pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.\n\nIf a callback function is provided, it is called with the arguments (error, stdout, stderr). On success, error will be null. On error, error will be an instance of Error. The error.code property will be the exit code of the process. By convention, any exit code other than 0 indicates an error. error.signal will be the signal that terminated the process.\n\nThe stdout and stderr arguments passed to the callback will contain the stdout and stderr output of the child process. By default, Node.js will decode the output as UTF-8 and pass strings to the callback. The encoding option can be used to specify the character encoding used to decode the stdout and stderr output. If encoding is 'buffer', or an unrecognized character encod","regexInput":"Edit"}